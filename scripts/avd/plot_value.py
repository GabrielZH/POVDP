import numpy as np
import torch
import matplotlib.pyplot as plt

# Create a 2D tensor (matrix) with random values
episode = torch.load('data/avd/pose_nav/10000_-12_-12_12_12__25_25__12_9_15_coca_cola_glass_bottle_10_50_8/val/episode.pt')
for i in range(20):
    index = np.random.randint(len(episode))
    values = episode.get(str(index)).get('values')
    # random_values = torch.normal(mean=-5, std=1, size=values.shape)
    non_inf_mask = ~torch.isinf(values).all(dim=0)
    for h in range(values.shape[1]):
        for w in range(values.shape[2]):
            if non_inf_mask[h, w]:
                non_inf_channel_value = values[~torch.isinf(values[:, h, w]), h, w][0]
                values[:, h, w] = non_inf_channel_value
    values = torch.where(
        torch.isinf(values), 
        -2, 
        values
    )
    values = values.mean(dim=0)

    plt.figure(figsize=(10, 8))
    plt.imshow(values, cmap='hot', interpolation='nearest')
    plt.colorbar()

    # Save the figure to a file
    filename = f"values_{i}.png"
    plt.savefig(filename, dpi=300, bbox_inches='tight')

    # Display a message to confirm the saving
    print(f"Heatmap saved to {filename}")

# print(f"values:\n{values}")

# values = torch.tensor(
#     [[-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2.,   1.7560, -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2.,   0.6527,   2.0237,   2.8864, -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2.,   0.0520,   0.6474,   2.2467,   2.6181,   3.1711, -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2.,   0.6088,   0.8277,   2.1451,   2.3002,   3.4663, -2.,   5.3459, -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2.,   2.1806,   2.4370,   3.0315,   4.0059,   4.5907,   5.5842,   6.3885, -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2.,   3.7950,   4.0962,   5.1814,   6.4689, -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2.,   5.0684,   5.7619, -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.],
#     [-2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2., -2.]]
# )

# Plotting the heatmap


